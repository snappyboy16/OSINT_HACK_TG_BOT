import sqlite3
from time import sleep
from aiogram.types import InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from fake_useragent import UserAgent
from selenium.webdriver.chrome.options import Options
from selenium import webdriver
from selenium.webdriver import Keys
from selenium.webdriver.common.by import By
from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from start_bot import dp, bot
from database import db_find, db_profile
from keyboards import user_kb

sql_db = sqlite3.connect('database/db_phone.db')
cur = sql_db.cursor()


def phone_num_exist(phone):
    cur.execute('SELECT * FROM phone WHERE phone = ?', (phone,))
    phone_ex = cur.fetchall()
    return bool(len(phone_ex))


def site_name_exist(name):
    cur.execute('SELECT * FROM site WHERE name = ?', (name,))
    site_ex = cur.fetchall()
    return bool(len(site_ex))


class UserFind(StatesGroup):
    mess = State()


@dp.callback_query_handler(text='check')
async def menu_find(call: types.CallbackQuery):
    await call.message.delete()
    await bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç')
    await UserFind.mess.set()


@dp.message_handler(state=UserFind.mess)
async def find_mess(message: types.Message, state: FSMContext):
    global user_mess
    user_mess = message.text
    if '+' in user_mess:
        phone_mess = user_mess[1:]
        phone_user_id = db_find.find_phone_user_id(phone_mess)
        phone_user = db_find.find_phone_user(phone_mess)
        phone_num = db_find.find_phone_num(phone_mess)
        phone_reg = db_find.find_phone_reg(phone_mess)
        phone_oper = db_find.find_phone_oper(phone_mess)
        phone_type = db_find.find_phone_type(phone_mess)
        phone_view = db_find.find_phone_view(phone_mess)
        if len(phone_mess) == 11:
            if phone_mess.isdigit():
                if not phone_num_exist(phone=phone_mess):
                    await bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç –≤ –±–∞–∑–µ')
                    await state.finish()
                else:
                    await bot.send_message(message.from_user.id, 'üîé –°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–º–µ—Ä–µ...')
                    sleep(1)
                    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id + 1,
                                                text='üìû –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–º–µ—Ä...')
                    sleep(1)
                    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id + 1,
                                                text='üéâ –ì–æ—Ç–æ–≤–æ')
                    sleep(1)
                    db_profile.set_profile_viewed_phone(1, message.from_user.id)
                    db_profile.set_profile_view(1, phone_user_id)
                    db_find.set_find_phone_view(1, phone_num)
                    await bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id + 1, text=
                                                f'üì± <b>–ù–æ–º–µ—Ä:</b> +{phone_num}\n\n'
                                                f'üèô <b>–†–µ–≥–∏–æ–Ω:</b> {phone_reg}\n\n'
                                                f'üè¢ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {phone_oper}\n\n'
                                                f'‚ö†Ô∏è<b> –í–∏–¥ –Ω–æ–º–µ—Ä–∞:</b> {phone_type}\n\n'
                                                f'üëÅ <b> –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: </b>{phone_view}\n\n'
                                                f'üë§ <b> –î–æ–±–∞–≤–ª–µ–Ω:</b> @{phone_user}\n\n'
                                                f'', parse_mode='HTML', reply_markup=user_kb.start_menu_kb)
                    await state.finish()
            else:
                await bot.send_message(message.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞ –Ω–µ —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                                       reply_markup=user_kb.start_menu_kb)
                await state.finish()
        else:
            await bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä –≤–≤–µ–¥—ë–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
                                   reply_markup=user_kb.start_menu_kb)
            await state.finish()
    elif 'http://' in user_mess or 'https://' in user_mess:
        site_link = user_mess
        sep_site = 'https://' or 'http://'
        site_link_clear = site_link.replace(sep_site, '')
        if not '/' in site_link_clear:
            if not site_name_exist(name=site_link_clear):
                await bot.send_message(message.from_user.id, '–°–∞–π—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ')
                await state.finish()
            else:
                site_user_id = db_find.find_site_user_id(site_link_clear)
                site_user = db_find.find_site_user(site_link_clear)
                site_registrator = db_find.find_site_registartor(site_link_clear)
                site_domain_reg = db_find.find_site_domain_reg(site_link_clear)
                site_domain_finish = db_find.find_site_domain_finish(site_link_clear)
                site_web_archive = db_find.find_site_web_archive(site_link_clear)
                site_type = db_find.find_site_type(site_link_clear)
                site_view = db_find.find_site_view(site_link_clear)

                web_kb = InlineKeyboardMarkup(row_width=1)
                web_archive = InlineKeyboardButton('üìÅ Web-Archive', url=site_web_archive)
                menu = InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
                web_kb.row(web_archive).row(menu)

                db_profile.set_profile_viewed_site(1, message.from_user.id)
                db_profile.set_profile_view(1, site_user_id)
                db_find.set_find_site_view(1, site_link_clear)
                await bot.send_message(message.from_user.id, f'üìù <b>–ò–º—è: </b>{site_link_clear}\n\n'
                                                             f'üåê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: </b>{site_registrator}\n\n'
                                                             f'üìÖ <b>–î–æ–º–µ–Ω —Å–æ–∑–¥–∞–Ω: </b>{site_domain_reg}\n\n'
                                                             f'üóì <b>–°—Ä–æ–∫ –¥–æ–º–µ–Ω–∞: </b>{site_domain_finish}\n\n'
                                                             f'‚ö†Ô∏è <b>–í–∏–¥ —Å–∞–π—Ç–∞: </b>{site_type}\n\n'
                                                             f'üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: </b>{site_view}\n\n'
                                                             f'üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω: </b>@{site_user}', reply_markup=web_kb,
                                       disable_web_page_preview=True, parse_mode='HTML')
                await state.finish()
        else:
            site_link_db = site_link_clear[0:site_link_clear.index('/')]
            if not site_name_exist(name=site_link_db):
                await bot.send_message(message.from_user.id, '–°–∞–π—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ')
                await state.finish()
            else:
                site_user_id = db_find.find_site_user_id(site_link_db)
                site_user = db_find.find_site_user(site_link_db)
                site_registrator = db_find.find_site_registartor(site_link_db)
                site_domain_reg = db_find.find_site_domain_reg(site_link_db)
                site_domain_finish = db_find.find_site_domain_finish(site_link_db)
                site_web_archive = db_find.find_site_web_archive(site_link_db)
                site_type = db_find.find_site_type(site_link_db)
                site_view = db_find.find_site_view(site_link_db)

                web_kb = InlineKeyboardMarkup(row_width=1)
                web_archive = InlineKeyboardButton('üìÅ Web-Archive', url=site_web_archive)
                menu = InlineKeyboardButton('üè† –ú–µ–Ω—é', callback_data='menu')
                web_kb.row(web_archive).row(menu)

                db_profile.set_profile_viewed_site(1, message.from_user.id)
                db_profile.set_profile_view(1, site_user_id)
                db_find.set_find_site_view(1, site_link_db)
                await bot.send_message(message.from_user.id, f'üìù <b>–ò–º—è: </b>{site_link_db}\n\n'
                                                             f'üåê <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ç–æ—Ä: </b>{site_registrator}\n\n'
                                                             f'üìÖ <b>–î–æ–º–µ–Ω —Å–æ–∑–¥–∞–Ω: </b>{site_domain_reg}\n\n'
                                                             f'üóì <b>–°—Ä–æ–∫ –¥–æ–º–µ–Ω–∞: </b>{site_domain_finish}\n\n'
                                                             f'‚ö†Ô∏è <b>–í–∏–¥ —Å–∞–π—Ç–∞: </b>{site_type}\n\n'
                                                             f'üëÅ <b>–ü—Ä–æ—Å–º–æ—Ç—Ä—ã: </b>{site_view}\n\n'
                                                             f'üë§ <b>–î–æ–±–∞–≤–ª–µ–Ω: </b>@{site_user}', reply_markup=web_kb,
                                       disable_web_page_preview=True, parse_mode='HTML')
                await state.finish()
    else:
        await bot.send_message(message.from_user.id, '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é')
        await state.finish()


def register_handlers_find(dp: Dispatcher):
    dp.register_message_handler(menu_find, text='check')
    dp.register_message_handler(find_mess, state=UserFind.mess)
